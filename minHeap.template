// Name: Vivian Huynh
// Date: 11/13/2023
// Description: template file for template class minHeap

//Precondition : N/A
//Postcondition: N/A
template <class T>
minHeap<T>::minHeap()
{}

//------------------------------------------------------
// 
//                     ACCESSORS 
// 
//------------------------------------------------------
//Precondition : N/A
//Postcondition: Return the size of the vector
template <class T>
int minHeap<T>::getSize() const
{
	return minimum.size();
}
//Precondition : N/A
//Postcondition: Return TRUE if the dynamic array is empty
//				 Return FALSE if the dynamic array has data
template <class T>
bool minHeap<T>::isEmpty() const
{
	return minimum.empty();
}
//Precondition : Dynamic array is not empty
//Postcondition: Return the first element of the vector
template <class T>
T minHeap<T>::getFront() const
{
	return minimum.front();
}
//Precondition : Passing in a valid template data
//Postcondition: Return TRUE if no duplicate data and change the vector
//				 Return FALSE if there is duplicate data
template <class T>
bool minHeap<T>::push(const T& data)
{
	for (int i = 0; i < minimum.size(); i++)
	{
		if (minimum[i] == data)
		{
			return false;
		}
	}
	minimum.push_back(data);
	push_heap(minimum.begin(), minimum.end(), greater<T>());
	return true;
}

//------------------------------------------------------
// 
//                     MUTATORS 
// 
//------------------------------------------------------
//Precondition : Dynamic array is not empty
//Postcondition: Removing the first element in the vector
template <class T>
void minHeap<T>::pop()
{
	pop_heap(minimum.begin(), minimum.end(), greater<T>());
	minimum.pop_back();
}
//Precondition : Dynamic array is not empty
//Postcondition: Display all the data inside the vector
template<class T>
ostream& operator <<(ostream& out, const minHeap<T>& obj)
{
    for (const auto& value : obj.minimum)
	{
		out << value << " ";
	}
	out << '\n';
    return out;
}

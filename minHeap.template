// Name: Vivian Huynh
// Date: 11/13/2023
// Description: cpp file for template class minHeap

//Precondition : N/A
//Postcondition: N/A
template <class T>
minHeap<T>::minHeap()
{}

//------------------------------------------------------
// 
//                     ACCESSORS 
// 
//------------------------------------------------------
//Precondition : Dynamic array is not empty; Passing in the size of the array
//Postcondition: Return half of the size of the array
template <class T>
T minHeap<T>::getParent(int size)
{
	return (size - 1) / 2;
}
//Precondition : N/A
//Postcondition: Return the size of the array
template <class T>
int minHeap<T>::getSize() const
{
	return arra.size();
}
//Precondition : N/A
//Postcondition: Return TRUE if the dynamic array is empty
//				 Return FALSE if the dynamic array has data
template <class T>
bool minHeap<T>::isEmpty() const
{
	return arra.empty();
}
//Precondition : Dynamic array is not empty
//Postcondition: Return the first element of the array
template <class T>
T minHeap<T>::getFront() const
{
	return arra.front();
}
//Precondition : Passing in a valid template data
//Postcondition: Return TRUE if no duplicate data and change the array
//				 Return FALSE if there is duplicate data
template <class T>
bool minHeap<T>::push(const T& data)
{
	for (int i = 0; i < arra.size(); i++)
	{
		if (arra[i] == data)
		{
			return false;
		}
	}
	arra.push_back(data);
	return true;
}

//------------------------------------------------------
// 
//                     MUTATORS 
// 
//------------------------------------------------------
//Precondition : Passing in size of the array
//Postcondition: Arrange array in reheapification up
template <class T>
void minHeap<T>::reheapification(int size)
{
	if(size != 0 && arra[getParent(size)] > arra[size])
	{
		swap(arra[size], arra[getParent(size)]);																							
		reheapification(getParent(size));
	}
}
//Precondition : Dynamic array is not empty
//Postcondition: Removing the first element in the array
template <class T>
void minHeap<T>::pop()
{
	arra.erase(arra.begin());
}
//Precondition : Dynamic array is not empty
//Postcondition: Display all the data inside the array
template <class T>
void minHeap<T>::display()
{
	cout << "\n\tHeap\n\t";
	for (int i = 0; i < arra.size(); i++)
	{
		cout << arra[i] << " ";
		//if (arra.size() > 1 && arra.size())
		//{

		//}
	}
	cout << '\n';
}

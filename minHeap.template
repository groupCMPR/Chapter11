// Name: Vivian Huynh
// Date: 11/13/2023
// Description: template file for template class minHeap

//Precondition : N/A
//Postcondition: N/A
template <class T>
minHeap<T>::minHeap()
{}

//------------------------------------------------------
// 
//                     ACCESSORS 
// 
//------------------------------------------------------
//Precondition : N/A
//Postcondition: Return the size of the vector
template <class T>
int minHeap<T>::getSize() const
{
	return myVector.size();
}
//Precondition : N/A
//Postcondition: Return TRUE if the dynamic array is empty
//				 Return FALSE if the dynamic array has data
template <class T>
bool minHeap<T>::isEmpty() const
{
	return myVector.empty();
}
//Precondition : Dynamic array is not empty
//Postcondition: Return the first element of the vector
template <class T>
T minHeap<T>::getFront() const
{
	return myVector.front();
}
//Precondition : Passing in a valid template data
//Postcondition: Return TRUE if no duplicate data and change the vector
//				 Return FALSE if there is duplicate data
template <class T>
bool minHeap<T>::push(const T& data)
{
	for (int i = 0; i < myVector.size(); i++)
	{
		if (myVector[i] == data)
		{
			return false;
		}
	}
	myVector.push_back(data);
	return true;
}

//Precondition : Dynamic array is not empty
//Postcondition: Display all the data inside the vector
template <class T>
void minHeap<T>::display() const
{
	cout << "\n\t\tHeap\n\t\t";
	for (int i = 0; i < myVector.size(); i++)
	{
		cout << myVector[i] << " ";
	}
	cout << endl;
}

//------------------------------------------------------
// 
//                     MUTATORS 
// 
//------------------------------------------------------
//Precondition : Dynamic array is not empty
//Postcondition: Arrange vector in reheapification up
template <class T>
void minHeap<T>::reheapification()
{
	make_heap(myVector.begin(), myVector.end(), greater<int>());
}
//Precondition : Dynamic array is not empty
//Postcondition: Removing the first element in the vector
template <class T>
void minHeap<T>::pop()
{
	myVector.erase(myVector.begin());
}

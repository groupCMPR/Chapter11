//precondition: string prompt ("Maximum" or "Minimum")
//postcondition: constructor
template <typename T>
Union_Intersect_Heap<T>::Union_Intersect_Heap(const string& prompt) {
	this->prompt = prompt;
}

//precondition:N/A
//postcondition:sets up first and second heap
template <typename T>
void Union_Intersect_Heap<T>::set_Heap() {
	//clears J I C
	first_heap.clear();
	second_heap.clear();

	//loops fill in vectors
	int vector_Size = inputInteger("\n\tEnter the amount of integers to input into the first " + prompt + " heap: ", true);
	first_heap.reserve(vector_Size);
	do {
		first_heap.push_back(inputInteger("\n\tEnter an element: "));
		--vector_Size;
	} while (vector_Size > 0);

	vector_Size = inputInteger("\n\tEnter the amount of integers to input into the second " + prompt + " heap: ", true);
	second_heap.reserve(vector_Size);
	do {
		second_heap.push_back(inputInteger("\n\tEnter an element: "));
		--vector_Size;
	} while (vector_Size > 0);

	//makes a heap
	make_heap(first_heap.begin(), first_heap.end());
	make_heap(second_heap.begin(), second_heap.end());

}

//precondition: first and second heap must be filled, bool used to make max or min heap
//postcondition: merges two heaps into a max or min heap
template <typename T>
void Union_Intersect_Heap<T>::set_Union(bool is_max) {
	prompt_action = "Merged " + prompt;

	//all elements are copied
	final_heap = first_heap;

	//to avoid repeating numbers from the second heap
	for (auto iter = second_heap.begin(); iter < second_heap.end(); ++iter) {
		if (find(first_heap.begin(), first_heap.end(), *iter) == first_heap.end())
			final_heap.push_back(*iter);
	}

	//if true max heap, if false min heap
	if(is_max)
		make_heap(final_heap.begin(), final_heap.end());
	else
		make_heap(final_heap.begin(), final_heap.end(), greater<int>());
}

//precondition: first and second heap must be filled, bool used to make max or min heap
//postcondition: puts repeating elements in max or min heap
template <typename T>
void Union_Intersect_Heap<T>::set_Intersect(bool is_max) {
	final_heap.clear();

	prompt_action = "Intersect";

	//to get repeating numbers from the second heap
	for (auto iter = second_heap.begin(); iter < second_heap.end(); ++iter) {
		if (find(first_heap.begin(), first_heap.end(), *iter) != first_heap.end())
			final_heap.push_back(*iter);
	}

	//true max heap, false min heap
	if (is_max)
		make_heap(final_heap.begin(), final_heap.end());
	else
		make_heap(final_heap.begin(), final_heap.end(), greater<int>());
}

//precondition: N/A
//postcondition: returns true if empty, false if filled
template <typename T>
bool Union_Intersect_Heap<T>::get_Empty() {
	return (first_heap.empty());
}

//precondition:N/A
//postcondition:returns prompt (Merge, Intersect)
template <typename T>
string Union_Intersect_Heap<T>::get_Prompt_Action() const {
	return prompt_action;
}

//precondition:N/A
//postcondition:returns prompt (Max, Min)
template <typename T>
string Union_Intersect_Heap<T>::get_Prompt() const{
	return prompt;
}

//precondition:N/A
//postcondition:returns iterator at .begin() of heap
template <typename T>
typename vector<T>::const_iterator Union_Intersect_Heap<T>::get_First_Begin() const {
	return first_heap.begin();
}

//precondition:N/A
//postcondition:returns iterator at .end() of heap
template <typename T>
typename vector<T>::const_iterator Union_Intersect_Heap<T>::get_First_End() const {
	return first_heap.end();
}

//precondition:N/A
//postcondition:returns iterator at .begin() of heap
template <typename T>
typename vector<T>::const_iterator Union_Intersect_Heap<T>::get_Second_Begin() const {
	return second_heap.begin();
}

//precondition:N/A
//postcondition:returns iterator at .end() of heap
template <typename T>
typename vector<T>::const_iterator Union_Intersect_Heap<T>::get_Second_End() const {
	return second_heap.end();
}

//precondition:N/A
//postcondition:returns iterator at .begin() of heap
template <typename T>
typename vector<T>::const_iterator Union_Intersect_Heap<T>::get_Final_Begin() const{
	return final_heap.begin();
}

//precondition:N/A
//postcondition:returns iterator at .end() of heap
template <typename T>
typename vector<T>::const_iterator Union_Intersect_Heap<T>::get_Final_End() const{
	return final_heap.end();
}

//precondition:filled in heaps
//postcondition:return display
template <typename T>
ostream& operator<< (ostream& out, const Union_Intersect_Heap<T>& obj){
	out << "\n\t" << obj.get_Prompt() << " heap #1: ";

	for (auto iter = obj.get_First_Begin(); iter != obj.get_First_End(); ++iter)
		out << *iter << " ";

	out << "\n\t" << obj.get_Prompt() << " heap #2: ";

	for (auto iter = obj.get_Second_Begin(); iter != obj.get_Second_End(); ++iter)
		out << *iter << " ";


	out << "\n\t" << obj.get_Prompt_Action() << " heap: ";
	for (auto iter = obj.get_Final_Begin(); iter != obj.get_Final_End(); ++iter)
		out << *iter << " ";

	return out;
}

// Name: Alexis Martinez
// Date: 11/19/2023
// Description: template file for template class maxHeap

//PreCondition: None
//PostConditon: Returns the size of the heap
template<typename T>
int maxHeap<T>::size(){
    return myVec.size();
}

//PreCondition: Accepts a valid data type
//PostCondition: returns true or false if the value is found in the heap
template<typename T>
bool maxHeap<T>::find(T value){
    for(int i = 0; i < myVec.size(); i++){
        if(myVec[i] == value)
            return true;
    }
    return false;
}

//PreCondition: None
//PostCondition: checks to see if heap is empty
template<typename T>
bool maxHeap<T>::empty(){
    return myVec.size() == 0;
}

//PreCondition: Accepts a valid data type 
//PostCondition: pushes a value onto the heap
template<typename T>
void maxHeap<T>::push(T value){
    myVec.push_back(value);
    push_heap(myVec.begin(), myVec.end());
}

//PreCondition: None
//PostCondition: Returns the front of the heap
template<typename T>
T maxHeap<T>::front(){
    return myVec[0];
}

//PreCondition: None
//PostCondition: Pops the first element in the heap
template<typename T>
void maxHeap<T>::pop(){
    pop_heap(myVec.begin(), myVec.end());
    myVec.pop_back();
}

//PreCondition: accepts ostream and object 
//PostCondition: outputs the contents of the heap
template<class T>
ostream& operator <<(ostream& out, const maxHeap<T>& obj)
{
    for (const auto& value : obj.myVec)
            out << value << " ";
        return out;
}

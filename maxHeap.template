template<typename T>
int maxHeap<T>::size(){
    return myVec.size();
}

template<typename T>
bool maxHeap<T>::empty(){
    return myVec.size() == 0;
}

template<typename T>
void maxHeap<T>::push(T value){
    myVec.push_back(value);
    push_heap(myVec.begin(), myVec.end());
}

template<typename T>
T maxHeap<T>::front(){
    return myVec[0];
}

template<typename T>
void maxHeap<T>::pop(){
    pop_heap(myVec.begin(), myVec.end());
    myVec.pop_back();
}

template<class T>
ostream& operator <<(ostream& out, const maxHeap<T>& obj)
{
    for (const auto& value : obj.myVec)
            out << value << " ";
        return out;
}
